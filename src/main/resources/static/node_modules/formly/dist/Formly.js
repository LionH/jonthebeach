'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormlyErrors = require('./FormlyErrors');

var _FormlyErrors2 = _interopRequireDefault(_FormlyErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Formly = function () {

  /**
   * Create a new Formly instance.
   *
   * @param {Object} data
   */
  function Formly() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Formly);

    this.originalData = data;
    this.errors = new _FormlyErrors2.default();
    this.processing = false;
    this.successful = false;

    _extends(this, data);
  }

  /**
   * Get the form data
   */


  _createClass(Formly, [{
    key: 'data',
    value: function data() {
      return _.omit(JSON.parse(JSON.stringify(this)), ['processing', 'successful', 'errors', 'originalData']);
    }

    /**
     * Start processing the form.
     */

  }, {
    key: 'startProcessing',
    value: function startProcessing() {
      this.errors.clear();
      this.processing = true;
      this.successful = false;
    }

    /**
     * Finish processing the form.
     */

  }, {
    key: 'onSuccess',
    value: function onSuccess() {
      this.processing = false;
      this.successful = true;
    }

    /**
     * Finish processing the form with the given errors.
     */

  }, {
    key: 'onFail',
    value: function onFail(errors) {
      this.errors.set(errors);

      this.processing = false;
    }

    /**
     * Reset the form back to its original state.
     */

  }, {
    key: 'reset',
    value: function reset() {
      _.extend(true, this, this.originalData);
    }

    /**
     * Helper method for making POST HTTP requests.
     */

  }, {
    key: 'post',
    value: function post(uri) {
      return this.send('post', uri);
    }

    /**
     * Helper method for making PUT HTTP requests.
     */

  }, {
    key: 'put',
    value: function put(uri) {
      return this.send('put', uri);
    }

    /**
     * Helper method for making PATCH HTTP requests.
     */

  }, {
    key: 'patch',
    value: function patch(uri) {
      return this.send('patch', uri);
    }

    /**
     * Helper method for making DELETE HTTP requests.
     */

  }, {
    key: 'delete',
    value: function _delete(uri) {
      return this.send('delete', uri);
    }

    /**
     * Send the form to the back-end server.
     */

  }, {
    key: 'send',
    value: function send(method, uri) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.startProcessing();

        axios[method](uri, _this.data()).then(function (response) {
          _this.onSuccess();

          resolve(response.data);
        }).catch(function (errors) {
          _this.onFail(errors.response.data);

          reject(errors.response.data);
        });
      });
    }
  }]);

  return Formly;
}();

exports.default = Formly;