'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormlyErrors = function () {
  /**
   * Create a new error bag container.
   */
  function FormlyErrors() {
    _classCallCheck(this, FormlyErrors);

    this.errors = {};
  }

  /**
   * Determine if the collection has any errors.
   */


  _createClass(FormlyErrors, [{
    key: 'hasErrors',
    value: function hasErrors() {
      return !_.isEmpty(this.errors);
    }

    /**
     * Determine if the collection has errors for a given field.
     */

  }, {
    key: 'has',
    value: function has(field) {
      return _.indexOf(_.keys(this.errors), field) > -1;
    }

    /**
     * Get all of the raw errors for the collection.
     */

  }, {
    key: 'all',
    value: function all() {
      return this.errors;
    }

    /**
     * Get all of the errors for the collection in a flat array.
     */

  }, {
    key: 'flatten',
    value: function flatten() {
      return _.flatten(_.toArray(this.errors));
    }

    /**
     * Get the first error message for a given field.
     */

  }, {
    key: 'first',
    value: function first(field) {
      if (this.has(field)) {
        return this.errors[field][0];
      }
    }

    /**
     * Get all of the messages for a given field.
     */

  }, {
    key: 'get',
    value: function get(field) {
      if (this.has(field)) {
        return this.errors[field];
      }
    }

    /**
     * Set the raw errors for the collection.
     */

  }, {
    key: 'set',
    value: function set(errors) {
      if ((typeof errors === 'undefined' ? 'undefined' : _typeof(errors)) === 'object') {
        this.errors = errors;
      } else {
        this.errors = { form: ['Something went wrong. Please try again or contact customer support.'] };
      }
    }

    /**
     * Clear one or all error fields.
     *
     * @param {string|null} field
     */

  }, {
    key: 'clear',
    value: function clear(field) {
      if (field) {
        delete this.errors[field];

        return;
      }

      this.errors = {};
    }
  }]);

  return FormlyErrors;
}();

exports.default = FormlyErrors;